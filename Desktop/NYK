 _   _                __   __            _  __                    
| \ | | _____      __ \ \ / /__  _   _  | |/ /_ __   _____      __
|  \| |/ _ \ \ /\ / /  \ V / _ \| | | | | ' /| '_ \ / _ \ \ /\ / /
| |\  | (_) \ V  V /    | | (_) | |_| | | . \| | | | (_) \ V  V / 
|_| \_|\___/ \_/\_/     |_|\___/ \__,_| |_|\_\_| |_|\___/ \_/\_/  

.........................
.. D I S T R I B U T E ..
........ J A V A ........
........ A P P S ........
.........................
DISTRIBUTE JAVA APPS:
1. Just use jar.
2. Use launch4j and an installer like NSIS.
3. Use Webstart.
4. Use a native-code compiler like Excelsior JET and distribute as a executable, or wrap it up in an installer.
-----
Java desktop app:
On Windows this means .exe, start menu links, control panel integration and specific task manager process for example with minimal overhead start time for a small app (still waiting for update 10 here...) and a shiny own icon in the taskbar when they launch it, not a Java icon.
----
JNLP / webstart / RCP (eclipse) / InstallBuilder (for adding jre to install)
If you're building an application atop SWT/JFace/RCP rather than Swing, you can create and run a product build in the Eclipse IDE, which results in an executable, making something like exe4j unnecessary
----
Convert Jar file to EXE executable:
JSmooth .exe wrapper (2007)
JarToExe 1.8
Executor
Advanced Installer
LaunchAnywhere
JexePack (Class to EXE)
Launch4j
----
.........................
....... L I N U X .......
...... S Y S T E M ......
. P R O G R A M M I N G .
.........................
LINUX ABSTRACTIONS:
1.FILE
2.PROCESS
triplet of the Linux kernel (the heart of
the operating system), the GNU C library (glibc), and the GNU C Compiler

ABI (application binary interface):
Thus, each machine architecture has its
own ABI on Linux. In fact, we tend to call a particular ABI by its machine name, such
as Alpha, or x86-64. Thus, the ABI is a function of both the operating system (say, Linux)
and the architecture (say, x86-64)

SPECIAL FILES:
Linux supports four: block device
files (disk), character device files (keyboard), named pipes, and Unix domain sockets.

INTERPROCESS COMMUNICATION:
mechanisms supported by Linux incqqlude pipes, named pipes, semaphores, message
queues, shared memory, and futexes.

Modern operating systems provide two fundamental virtualized abstractions to user-space: virtual memory and a virtualized processor.

MEMORY:
Unlike malloc(), which makes no such guarantees about the contents of allocated memory, calloc() zeros all bytes in the returned chunk of memory.

/* like malloc(), but zeros memory and terminates on failure */
void * xmalloc0 (size_t size) {
	void *p;
	p = calloc (1, size);
	if (!p) {
		perror ("xmalloc0");
		exit (EXIT_FAILURE);
	}
	return p;
}

APPROACH  | PROS						    |CONS
----------+---------------------------------+----------------------------------------------
malloc()  |	Easy, simple, common. 			|Returned memory not necessarily zeroed.
calloc()  |	Makes allocating arrays simple, |Convoluted interface if not allocating arrays.
          |	zeros returned memory. 			|
realloc() |	Resizes existing allocations. 	|Useful only for resizing existing allocations.

void free (void *ptr);
A call to free() frees the memory at ptr. The parameter ptr must have been previously
returned by malloc(), calloc(), or realloc(). That is, you cannot use free() to free
partial chunks of memory—say, half of a chunk of memory—by passing in a pointer
halfway into an allocated block
----
...............
...............
.. M A V E N ..
...............
...............
mvn / maven2 / m2e

(bin - sh skripte (run.sh))
src/main/java/com... - source
src/test/java/com... - test source (junits)
src/test/resources/images/ - test images
(test-data/)
target/classes - compiled classes
pom.xml - build commands file

"from manual:"
----------------------------------------------------
src/main/java 	Application/Library sources
src/main/resources 	Application/Library resources
src/main/filters 	Resource filter files
src/main/assembly 	Assembly descriptors
src/main/config 	Configuration files
src/main/scripts 	Application/Library scripts
src/main/webapp 	Web application sources
src/test/java 	Test sources
src/test/resources 	Test resources
src/test/filters 	Test resource filter files
src/site 	Site
LICENSE.txt 	Project's license
NOTICE.txt 	Notices and attributions required by libraries that the project depends on
README.txt 	Project's readme
---------------------------------------------------
.................
.. C O D E R S ..
...... A T ......
.... W O R K ....
.................

JAMIE ZAWINSKI - NETSCAPE
- If you don't understand how something works, ask someone who does. -> communication

BRAD FITZPATRICK - YOUNG GUY
- Google app engime -> basic of today
- Sideprojects -> hiring
- Strace -> favourite tool
- Higher order perl -> book
- Python -> language
- Write to mantainer: "I want to add feature X. I was thinking something like the attached patch", which is totaly wrong but say, "but I think It's totally wrong.I'm thinking the right way might be to do X." which is some more complex way.

DOUGLAS CROCKFORD - JSON, JAVASCRIPT: THE GOOD PARTS, KILLED JS4
- Regular code readings in team -> communication
- Art of computer programming -> book
- Being literate -> hiring
- Javascript -> new lego paradigm of programming (now we're in object era)
- Bring your piece of code ande walk me trough. I'm looking for how effectively can you comunicate. -> hiring

BRENDAN EICH - JAVASCRIPT, NETSCAPE, FIREFOX, WAS PUSHING JS4
- Ocaml intern -> hiring
- Let people talk about their own project -> hiring

JASHUA BLOCH - JAVA5, EFFECTIVE JAVA, JAVA PUZZLERS
- Elements of style -> book
- Java concurency in practice -> book
- Write the code that uses the api before you write the code that implements it. In fact, write it even before you flash out the spec.
- Use asserts -> information is too valuable to lose.

JOE ARMSTRONG - ERLANG
- Writing erlang graphics library by bypassing X -> turned out to be easy
- "I've got to choose between A and B", and you describe A and B  to them and then halfway trough that you go, "Yeah B. Thank you, thank you very much." -> explaining to coworkers
- What are the inputs to your problem? What are the outputs to your problem? What is the functional relationship between the two? -> guru answer
- If you want to understand c, write a c compiler.
- Documentation states the problem, code gives the answer.
- Also doesen't use logic puzzles for hiring. 

SIMON PEYTON JONES - HASKELL
- "Just start something, no matter how humble", write a paper about it. -> advice for research students
- Programming pearls -> book
- Purely functional data structures -> book

PETER NORVIG - GOOGLE, NASA, AI PROFESSOR
- Problem when new guys don't check in their experimental branch for weeks.

GUY STEELE - COMMON LISP, SCHEME
- If I could go back and change one thing, I might try to interest some early preliterate people in not using their thumbs when they count.

DAN INGALLS - SMALLTALK
- Be clear about what you're trying to do. -> Being a good technical leader

L PETER DEUTSCH - GHOSTSCRIPT
- "Fast, cheap, good - pick any two." -> old saying in the buissines
- Things that are getting reused this days are either very large (mozilla, apache) or very small (icons, web page designs)
- Every programming language in substantial use today has the concept of pointer. This holds languages back. Problem is the lack of overview. All the connections (referencess) are made localy inside classes.
- Language systems stand on a tripod: Language, Libraries and Tools.

KEN THOMPSON - UNIX
- I only write down data structures. -> design
- It's just enthusiasm. -> identifiying good programmers
- I love yacc, lex is horrible. I write my lexers by hand.
- Computers are played out.

FRAN ALLEN - IBM
- Trying to find out what they are excited about. -> hiring
- Motivation for the design of C was three problems they couldn't solve in the higher level languages: Interrupt handling, Scheaduling resources (Taking over machine and scheduling a process that was in thw queue) and Memory allocation.
- We in the field have to make it more appealing. We have to give rhe field an identity that expands it further than the identity it seems to have now - a much more human identity.
- C is bad because it makes impossible to write highly optimizing compilers.

BERNIE COSELL - ARPANET
- Programms ought to make sense and there are very, very few inherently hard problems. -> two convictions he had from the start of his career and showed to be true
- I could write some wery complicated code, but it was always in an encapsulated place.
- I'm a big fan of call-once subrotines, where the only function of the subrotine is to abstract some little part of a parent subrotine.
- If the open brace is too far from close brace, then often it's doing too much.
- C: security hazzard

DONALD KNUTH - ART OF COMPUTER PROGRAMMING, TEX
- I couldn't teach classes full-time and write software fuul-time. I could teach classes full-time and write a book full-time.
- One of the most important revolutions in programming languages was the use of pointers in the C language. When X is a pointer and you say x+1, that doesen't mean one more byte, but one more node after X.
----

.................
.................
.... W E K A ....
.................
.................

----------------
FORMATING INPUT:
----------------
1. DECLARE ATTRIBUTES:
	Numeric:
		Attribute Attribute1 = new Attribute("firstNumeric");
	Nominal:
		FastVector fvNominalVal = new FastVector(3);
		fvNominalVal.addElement("blue");
		fvNominalVal.addElement("gray");
		fvNominalVal.addElement("black");
		Attribute Attribute2 = new Attribute("aNominal", fvNominalVal);
		
2. PUT THEM IN FAST VECTOR:
	FastVector fvWekaAttributes = new FastVector(2);
		 fvWekaAttributes.addElement(Attribute1);    
		 fvWekaAttributes.addElement(Attribute2);

3. CREATE INSTANCES CONTAINER:
	Instances instances = new Instances("entries", fvWekaAttributes, 10); 
	
4. FILL IT WITH INSTANCES
	Instance inst = new Instance(2);
	inst.setValue((Attribute)fvWekaAttributes.elementAt(0), 0.2);
	inst.setValue((Attribute)fvWekaAttributes.elementAt(1), 0.8);

	inst.setDataset(instances);
	instances.add(inst);


SHEMA:
1. Attribute (attribute declarations) -> FastVector (attribute container) -> Istances constructor
2. Double, Attribute -> Instance (instances) -> Istances

.....................
.....................
. E F F E C T I V E .
...... J A V A ......
.....................
.....................



