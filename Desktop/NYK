 _   _                __   __            _  __                    
| \ | | _____      __ \ \ / /__  _   _  | |/ /_ __   _____      __
|  \| |/ _ \ \ /\ / /  \ V / _ \| | | | | ' /| '_ \ / _ \ \ /\ / /
| |\  | (_) \ V  V /    | | (_) | |_| | | . \| | | | (_) \ V  V / 
|_| \_|\___/ \_/\_/     |_|\___/ \__,_| |_|\_\_| |_|\___/ \_/\_/  

.........................
.. D I S T R I B U T E ..
........ J A V A ........
........ A P P S ........
.........................
DISTRIBUTE JAVA APPS:
1. Just use jar.
2. Use launch4j and an installer like NSIS.
3. Use Webstart.
4. Use a native-code compiler like Excelsior JET and distribute as a executable, or wrap it up in an installer.
-----
Java desktop app:
On Windows this means .exe, start menu links, control panel integration and specific task manager process for example with minimal overhead start time for a small app (still waiting for update 10 here...) and a shiny own icon in the taskbar when they launch it, not a Java icon.
----
JNLP / webstart / RCP (eclipse) / InstallBuilder (for adding jre to install)
If you're building an application atop SWT/JFace/RCP rather than Swing, you can create and run a product build in the Eclipse IDE, which results in an executable, making something like exe4j unnecessary
----
Convert Jar file to EXE executable:
JSmooth .exe wrapper (2007)
JarToExe 1.8
Executor
Advanced Installer
LaunchAnywhere
JexePack (Class to EXE)
Launch4j

.........................
....... L I N U X .......
...... S Y S T E M ......
. P R O G R A M M I N G .
.........................
LINUX ABSTRACTIONS:
1.FILE
2.PROCESS
triplet of the Linux kernel (the heart of
the operating system), the GNU C library (glibc), and the GNU C Compiler

ABI (application binary interface):
Thus, each machine architecture has its
own ABI on Linux. In fact, we tend to call a particular ABI by its machine name, such
as Alpha, or x86-64. Thus, the ABI is a function of both the operating system (say, Linux)
and the architecture (say, x86-64)

SPECIAL FILES:
Linux supports four: block device
files (disk), character device files (keyboard), named pipes, and Unix domain sockets.

INTERPROCESS COMMUNICATION:
mechanisms supported by Linux incqqlude pipes, named pipes, semaphores, message
queues, shared memory, and futexes.

Modern operating systems provide two fundamental virtualized abstractions to user-space: virtual memory and a virtualized processor.

MEMORY:
Unlike malloc(), which makes no such guarantees about the contents of allocated memory, calloc() zeros all bytes in the returned chunk of memory.

/* like malloc(), but zeros memory and terminates on failure */
void * xmalloc0 (size_t size) {
	void *p;
	p = calloc (1, size);
	if (!p) {
		perror ("xmalloc0");
		exit (EXIT_FAILURE);
	}
	return p;
}

APPROACH  | PROS						    |CONS
----------+---------------------------------+----------------------------------------------
malloc()  |	Easy, simple, common. 			|Returned memory not necessarily zeroed.
calloc()  |	Makes allocating arrays simple, |Convoluted interface if not allocating arrays.
          |	zeros returned memory. 			|
realloc() |	Resizes existing allocations. 	|Useful only for resizing existing allocations.

void free (void *ptr);
A call to free() frees the memory at ptr. The parameter ptr must have been previously
returned by malloc(), calloc(), or realloc(). That is, you cannot use free() to free
partial chunks of memory—say, half of a chunk of memory—by passing in a pointer
halfway into an allocated block

...............
...............
.. M A V E N ..
...............
...............
mvn / maven2 / m2e

(bin - sh skripte (run.sh))
src/main/java/com... - source
src/test/java/com... - test source (junits)
src/test/resources/images/ - test images
(test-data/)
target/classes - compiled classes
pom.xml - build commands file

"from manual:"
----------------------------------------------------
src/main/java		Application/Library sources
src/main/resources 	Application/Library resources
src/main/filters 	Resource filter files
src/main/assembly 	Assembly descriptors
src/main/config 	Configuration files
src/main/scripts 	Application/Library scripts
src/main/webapp 	Web application sources
src/test/java		Test sources
src/test/resources 	Test resources
src/test/filters 	Test resource filter files
src/site			Site
LICENSE.txt			Project's license
NOTICE.txt			Notices and attributions required by libraries that the project depends on
README.txt			Project's readme

Eclipse:

Convert to maven project:
right click on project > configure > convert to maven project

Add dependency:
right click on project > maven > add dependency

Reseting project (may help in times of discontent):
F5 - refresh
Project > clean
maven > update project
maven > disable dependenency management, then maven > enable dependency management
close the project then reopen it
if you are behind proxy, then configure proxy settings


.................
.. C O D E R S ..
...... A T ......
.... W O R K ....
.................

JAMIE ZAWINSKI - NETSCAPE
- If you don't understand how something works, ask someone who does. -> communication

BRAD FITZPATRICK - YOUNG GUY
- Google app engime -> basic of today
- Sideprojects -> hiring
- Strace -> favourite tool
- Higher order perl -> book
- Python -> language
- Write to mantainer: "I want to add feature X. I was thinking something like the attached patch", which is totaly wrong but say, "but I think It's totally wrong.I'm thinking the right way might be to do X." which is some more complex way.

DOUGLAS CROCKFORD - JSON, JAVASCRIPT: THE GOOD PARTS, KILLED JS4
- Regular code readings in team -> communication
- Art of computer programming -> book
- Being literate -> hiring
- Javascript -> new lego paradigm of programming (now we're in object era)
- Bring your piece of code ande walk me trough. I'm looking for how effectively can you comunicate. -> hiring

BRENDAN EICH - JAVASCRIPT, NETSCAPE, FIREFOX, WAS PUSHING JS4
- Ocaml intern -> hiring
- Let people talk about their own project -> hiring

JASHUA BLOCH - JAVA5, EFFECTIVE JAVA, JAVA PUZZLERS
- Elements of style -> book
- Java concurency in practice -> book
- Write the code that uses the api before you write the code that implements it. In fact, write it even before you flash out the spec.
- Use asserts -> information is too valuable to lose.

JOE ARMSTRONG - ERLANG
- Writing erlang graphics library by bypassing X -> turned out to be easy
- "I've got to choose between A and B", and you describe A and B  to them and then halfway trough that you go, "Yeah B. Thank you, thank you very much." -> explaining to coworkers
- What are the inputs to your problem? What are the outputs to your problem? What is the functional relationship between the two? -> guru answer
- If you want to understand c, write a c compiler.
- Documentation states the problem, code gives the answer.
- Also doesen't use logic puzzles for hiring. 

SIMON PEYTON JONES - HASKELL
- "Just start something, no matter how humble", write a paper about it. -> advice for research students
- Programming pearls -> book
- Purely functional data structures -> book

PETER NORVIG - GOOGLE, NASA, AI PROFESSOR
- Problem when new guys don't check in their experimental branch for weeks.

GUY STEELE - COMMON LISP, SCHEME
- If I could go back and change one thing, I might try to interest some early preliterate people in not using their thumbs when they count.

DAN INGALLS - SMALLTALK
- Be clear about what you're trying to do. -> Being a good technical leader

L PETER DEUTSCH - GHOSTSCRIPT
- "Fast, cheap, good - pick any two." -> old saying in the buissines
- Things that are getting reused this days are either very large (mozilla, apache) or very small (icons, web page designs)
- Every programming language in substantial use today has the concept of pointer. This holds languages back. Problem is the lack of overview. All the connections (referencess) are made localy inside classes.
- Language systems stand on a tripod: Language, Libraries and Tools.

KEN THOMPSON - UNIX
- I only write down data structures. -> design
- It's just enthusiasm. -> identifiying good programmers
- I love yacc, lex is horrible. I write my lexers by hand.
- Computers are played out.

FRAN ALLEN - IBM
- Trying to find out what they are excited about. -> hiring
- Motivation for the design of C was three problems they couldn't solve in the higher level languages: Interrupt handling, Scheaduling resources (Taking over machine and scheduling a process that was in thw queue) and Memory allocation.
- We in the field have to make it more appealing. We have to give rhe field an identity that expands it further than the identity it seems to have now - a much more human identity.
- C is bad because it makes impossible to write highly optimizing compilers.

BERNIE COSELL - ARPANET
- Programms ought to make sense and there are very, very few inherently hard problems. -> two convictions he had from the start of his career and showed to be true
- I could write some wery complicated code, but it was always in an encapsulated place.
- I'm a big fan of call-once subrotines, where the only function of the subrotine is to abstract some little part of a parent subrotine.
- If the open brace is too far from close brace, then often it's doing too much.
- C: security hazzard

DONALD KNUTH - ART OF COMPUTER PROGRAMMING, TEX
- I couldn't teach classes full-time and write software fuul-time. I could teach classes full-time and write a book full-time.
- One of the most important revolutions in programming languages was the use of pointers in the C language. When X is a pointer and you say x+1, that doesen't mean one more byte, but one more node after X.

.................
.................
.... W E K A ....
.................
.................
----------------
FORMATING INPUT:
----------------
1. DECLARE ATTRIBUTES:
	Numeric:
		Attribute Attribute1 = new Attribute("firstNumeric");
	Nominal:
		FastVector fvNominalVal = new FastVector(3);
		fvNominalVal.addElement("blue");
		fvNominalVal.addElement("gray");
		fvNominalVal.addElement("black");
		Attribute Attribute2 = new Attribute("aNominal", fvNominalVal);
		
2. PUT THEM IN FAST VECTOR:
	FastVector fvWekaAttributes = new FastVector(2);
		 fvWekaAttributes.addElement(Attribute1);    
		 fvWekaAttributes.addElement(Attribute2);

3. CREATE INSTANCES CONTAINER:
	Instances instances = new Instances("entries", fvWekaAttributes, 10); 
	
4. FILL IT WITH INSTANCES
	Instance inst = new Instance(2);
	inst.setValue((Attribute)fvWekaAttributes.elementAt(0), 0.2);
	inst.setValue((Attribute)fvWekaAttributes.elementAt(1), 0.8);

	inst.setDataset(instances);
	instances.add(inst);


SHEMA:
1. Attribute (attribute declarations) -> FastVector (attribute container) -> Istances constructor
2. Double, Attribute -> Instance (instances) -> Istances

.....................
.....................
. E F F E C T I V E .
...... J A V A ......
.....................
.....................
--------------------------------
CREATING AND DESTROYING OBJECTS:
--------------------------------
1. Consider static factory methods instead of Constructors:
	+ They have names.
	+ They are not required to create a new object each time they're invoked.
	+ They can return an object of any subtype of their return type.
	- Classes withouth public or protected constructors cannot be subclassed.
	- They are not readily distinguishable from other static methods.
2. Consider a builder when faced with many constructor parameters.
3. Enforce the singleton property with a private constructor or an enum type. 
	Single-element enum is the best way to implement a singleton.
4. Enforce noninstantiability with a private constructor.
7. Avoid finalizers. 
	Never do anyting time-critical in a finalizer. 
	Provide an explict termination method.

------------------------------
METHODS COMMON TO ALL OBJECTS:
------------------------------
8. Obbey the general contract when overriding equals.
	1. Use the == operator to check if the argument is a refference to this object.
	2. Use the instanceof operator to check if the argument has the correct type.
	3. Cast the argument to correct type.
	4. For each "significant" field in the class, check if that field of the argument matches.
	5. Ask yourself three questions: Is it symmetric? Is it transitive? Is it consistent?
9. Always override hashcode when you override equals. 
	Equal objects must have equal hash codes.

-----------------------
CLASSES AND INTERFACES: 
-----------------------
13. Minimize the accessibility of classes and members. 
	It is wrong for a class to have a public static final array field, or an accessor that returns such a field. Use UnmodifiableList.
15. Minimize mutability. 
	Classes should be immutable unless there's a very good reason to make them mutable. 
	Make every field final unless there is a compeling reason to make it nonfinal.
16. Favor composition over inheritance. 
	Inheritance violates encapsulation.
17. Design and document for inheritance or else prohibit it. 
	The class must document its self-use of overridabl methods. 
	Constructors must not involve overridable methods. 
	Neither clone nor readObject may invoke an overridable method directly of inderectly.
18. Prefer interfaces to abstract classes. 
	You can combine the virtues of interfaces and abstract classes by providing an abstract skeletal implementation class to go  with each nontrivial interface that you export.

---------
GENERICS:
---------
Parametrized type		| List<String>
Actual type parameter	| String
Genaric type			| List<E>	
Formal type parameter	| E
Unbounded wildcard type	| List<?>
Raw type				| List
Bounded type parameter	| <E extends Number>
Recursive type bound	| <T extends Comparable<T>>
Bounded wildcard type	| List<? extends Number>
Generic Method			| static <E> List<E> asList(E[] a)
Type token				| Strung.class

If a type parameter appears only once in a method declaration, replace it with a wildcard.

----------------------
ENUMS AND ANNOTATIONS:
----------------------
32. Use EnumSet instead of bit fields.
33. Use EnumMap instead of ordinal indexing.
34. Emulate extensible enums with interfaces. 
	Enums can implement original enums interface and be used in place of original enum.

--------
METHODS:
--------
38. Check paramaeters for validity.
39. Make defensive copies when needed.
	Defensive copies are made before checking the validity of the parameters, and the validity check is performed on the copies.
43. Return empty arrays or collections, not nulls.
44. Write doc comments for all exposed API elements. 
	Use {a code} for code in doc comments

--------------------
GENERAL PROGRAMMING:
--------------------
49. Prefer primitive types to boxed primitives. 
	Applaying the == operator to boxed primitives is almost always wrong. When you mix primitives and boxed primitives in a single operation, the boxed primitive is auto-unboxed.

-----------
EXCEPTIONS:
-----------
58. Use checkedd exceptions for recoverable conditions and runtime exceptions for programing errors. 
	All of the unchecked throwables you implement should sublcass RuntimeException.
60. Favor the use of standard exceptions: IllegalArgumentExceptin, IllegalStateException, NullPointerException, IndexOutOfBoundsException, ConcurentModificationException, UnsupportedOperationException
61. Throw exceptions appropriate to the abstraction. 
	Higher layers should catch lower-leel exceptions and, in their place, throw exceptions that can be expained in terms of the higher-level abstraction. (Exception translation)
62. Document all exceptions thrown by each method.
63. Include failure-capture information indetail messges. 
	Should contain all parameters and fields that contributed to the exception.
64. Strive for failure atomicity. 
	A failed method invocation shoul leave the object in the state that it was in prior to invocation.

------------
CONCURRENCY:
------------
66. Synchronize access to shared mutable date. 
	Synchronnyzation has no effect unless both read and write operations are synchronized. 
	Confine mutable data to a single thread.
67. Avoid excessive synchronization. 
	As a rule, you should do as little work as possible inside synchronized regions.
68. Prefer executors and tasks to threads.
69. Prefer concurrency utilities to wait and notify. 
	Use ConcurentHashMap in preference to synchronyzedMap or HashTable. 
	For interval timing, always use System.nanoTime in preference to System.currentTimeMillis.
70. Document thread safety. 
	To enable safe concurrent use, a class must clearly document what level of thread safety it supports. 
	Leveld of thread safety:
		1. Immutable
		2. Unconditionally thread-safe -> No need for external synchronization.
		3. Conditionally thread-safe -> Some methods require external synchronization.
		4. Non thread-safe -> All methods require external synchronization.
		5. Thread hostile.
71. Use lazy initialization judiciously.
72. Don't depend on thread scheduler. 
	Threads should not run if they aren't doing useful work. 
	Thread priorities are among the least portable features of the Java platform.
73. Avoid thread groups. 
	Thread groups are obsolete.

--------------
SERIALIZATION:
--------------
74. Implement Serializable judiciusly.
75. Consider using custom serialized form. 
	Defauld serialized form is likely to be appropriate if an object's physical rpresentation is identical to its logical content. 
	Even if you decide that the default serialized form is appropriate, you often must provide readObject method to ensure invariants and security.
	Before deciding to make a field nontranzient, convince yourself that its value is part of the logical state of the object.
	You must impose any synchronization on object serialization that you would impose on any other method that reads the entire state of the object.
	Declare UID.
76. Write read Object methods defensively. Defensive copy.
77. For instance control, prefer enum types to readResolve.
78. Consider serialization proxies insted of serialized instance.

--------------------------------
NEW COLLECTINON INTERFACES IN 6.0:
--------------------------------
Deque -> Double ended queue. (ArrayDeque, LinkedList)
NavigableSet -> SortedSet extended. (TreeSet)
NavigableMap -> SortedMap extended. (TreeMap)
























