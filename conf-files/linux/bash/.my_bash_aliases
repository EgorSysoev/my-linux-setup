#!/bin/bash

#    _               _              _ _                     
#   | |__   __ _ ___| |__      __ _| (_) __ _ ___  ___  ___ 
#   | '_ \ / _` / __| '_ \    / _` | | |/ _` / __|/ _ \/ __|
#  _| |_) | (_| \__ \ | | |  | (_| | | | (_| \__ \  __/\__ \
# (_)_.__/ \__,_|___/_| |_|   \__,_|_|_|\__,_|___/\___||___/
#

########
# ECHO #
########

echoPosix() {
  if [ "$#" -gt 0 ]; then
     printf %s "$1"
     shift
  fi
  if [ "$#" -gt 0 ]; then
     printf ' %s' "$@"
  fi
  printf '\n'
}
alias e='echoPosix'

# Echo withouth new line at the end.
echoPosixN() {
  if [ "$#" -gt 0 ]; then
     printf %s "$1"
     shift
  fi
  if [ "$#" -gt 0 ]; then
     printf ' %s' "$@"
  fi
}
alias en='echoPosixN'

# Echo with backslash escapes (\n,...)
echoPosixE() {
  if [ "$#" -gt 0 ]; then
     printf %b "$1"
     shift
  fi
  if [ "$#" -gt 0 ]; then
     printf ' %b' "$@"
  fi
  printf '\n'
}
alias ee='echoPosixE'

# run konsole withouth menu and tab bar
alias konsole1="rb konsole --workdir "$PWD" --hide-menubar --hide-tabbar"
alias ko='konsole1'

# open vim in konsole with light theme
vvv() { 
	rb konsole --workdir "$PWD" --hide-menubar --hide-tabbar -e vim -p -c "set background=light" -c "colorscheme github" -c "set fo-=t"  "$@"
}
# open vim in console with tab width 2
vvvv() {
	vvv -c ":set ts=2" -c ":set sw=2" "$@"
}

# Execute command periodically every 2 seconds. Aliases can be
# also used.
alias watch1='watch bash -i -c'
# Every 10 seconds.
alias watch2='watch -n 10 bash -i -c'
# 30 seconds.
alias watch3='watch -n 30 bash -i -c'
# Open picture in console as ascii art.
alias asci='asciiview'
# Set keyboard layout to us and run xmodmap.
alias resetkey='setxkbmap -layout us; xmodmap ~/.Xmodmap'
alias resetkeys='resetkey'


########
# TEXT #
########

# Change input strings notation from CamelCase to underscore.
# (all the folowong commands work as pipe filters
toUnderscore() {
	cat | sed 's/\([A-Z]\)/_\1/g' | tr [a-z] [A-Z]
}

# Change input strings notation from CamelCase to underscore.
toHypenscore() {
	cat | sed 's/\([A-Z]\)/-\1/g' | tr [A-Z] [a-z] 
}
alias decamelize='toHypenscore'

# Vice versa.
toCamel() {
	cat | tr [A-Z] [a-z] | sed 's/[_-]\([a-z]\)/\U\1/g'
}


##########
# SYSTEM #
##########

# Turn off laptop monitor if external is connected.
vga() {
	xrandr | grep VGA | grep " connected " > /dev/null
	if [ $? -eq 0 ]; then
    	xrandr --output LVDS1 --off
		killall nautilus
		nautilus -n &
	fi
}


##########
# USEFUL #
##########

# Simplified sed command. Usage: cat file | sed1 <change this>
# <to this>. Warning: I don't guarantee all the quotations and
# expansions will stay intact. It just seems like playing with
# fire.
sed1() {
	input=`cat`
	echo "$input" | sed "s/$1/$2/" | catOrLess
}
# Same but with g option.
sed2() {
	input=`cat`
	echo "$input" | sed "s/$1/$2/g" | catOrLess
}

# Print clipboard
alias xo='xclip -o'
# Put in clipboard
alias xi='xclip -i'


############
# PACKAGES #
############

# Print packages that were installed by the user, in order of
# installation
alias packages='cat /var/log/apt/history.log | grep "apt-get install" | sed "s/.* //" | catOrLessG'
alias installed='packages'


#######
# GIT #
#######

commit() {
  if [ $# -eq 0 ]; then
    message="regular commit"
  else
  	message="$*"
  fi
  git commit -am "$message"
}

# GIT MISC:

# Push every project in the directory
pushall() {
	for a in *; do 
		(if [ -d "$a" ]; then 
			cd $a 
			echo "$a" 
			git push 
		fi) 
	done
}

# For all projects in the directory print the labaels of the
# last commit
alias gsta='for a in *; do if [[ -d "$a" ]]; then cd "$a"; echo "$a"; git remote update; git log --decorate | head -1; echo; cd ..;fi ; done'

# Usage: cloneAll <github-username>
# Clones all users github repos in pwd.
cloneAll() {
	if [[ -z "$1" ]]; then
		exit
	fi

	tempFile=`mktemp`
	wget 'https://github.com/gto76?tab=repositories' -O "$tempFile"
	repos=`grep "$1"/[^//\"]* -o "$tempFile" | sort -u | grep -v follow`

	while read -r line; do
		git clone git@github.com:"$line"
	done <<< "$repos"
}

# Displays lines of code per file in git repo and sum of all.
# Only looks for files in src directory.
gloc() {
	git ls-files \
		| xargs file \
		| grep text \
		| grep -o ^.*: \
		| tr -d ":" \
		| grep ^src/.* \
	  	| xargs wc -l 
}

# Runs gloc in all subfolders and only displays totals.
glocall() {
	sum=0
	for a in *; do 
		if [ -d "$a" ]; then 
			cd "$a"
			tot=`gloc | grep total | grep -o [0-9]*`
			if [ -n "$tot" ]; then
				echo "$a"
				echo "$tot"
				let sum=$sum+"$tot"
			fi
			cd ..
		fi
	done
	echo "============="
	echo "$sum"
}

# Plot distribution of file lengths in git repo. Gnuplot and
# gnuplot-x11 packages need to be installed.
giplot() {
	gitl | head -n-1 | sort -n | grep -o '^ *[0-9]* ' | tr -d ' ' > /tmp/gitlTmpFile 
	echo "unset key; plot '/tmp/gitlTmpFile'" | gnuplot -p 
	\rm /tmp/gitlTmpFile
}


###################
# NOT SO NECESARY #
###################

# Open last modified file in nano.
alias Nano="nano `ls -t | head -1`" 
# Open last modified file in vim.
alias Vim="vim `ls -t | head -1`" 

# Print majority of commands.
commands() {
	whatis `ls -1 /usr/share/man/man1/ \
		| sed 's/\..*$//' \
		| sed 's/-.*$//' \
		| sed 's/_.*$//' \
		| uniq` 2>/dev/null \
		| grep \(1\) \
		| sed 's/(1)//' \
		| grep -v DOS -i \
		| grep -v anymap \
		| grep -v ppm \
		| catOrLess
}

# Size of a command.
bsize() {
	loc=`which "$1"`
	if [ $? -eq 0 ]; then
		ls -Hlh "$loc" | sed 's/^[^ ]* [^ ]* [^ ]* [^ ]* \([^ ]*\).*/\1/'
	fi
}

# Display an image.
picture() {
	rb eog "$@"
}
#alias picture='eog'
alias image='picture'
alias img='picture'
alias d='picture'

######################
# PAGE/LINE COUNTING #
######################

# Prints how many pages roughly will text occupy in a smaller
# format (~A5) book.
noOfPages() {
	echo $(wc -w "$@" | grep -o ^[0-9]*) / 500 | bc	
}
alias pot='noOfPages'

# Same as noOfLines, but prints results per top directory.
locall() {
	table=$(for project in *; do 
		cd "$project"
		echo -n "$project;" 
		lines=`loc "$1"`
		echo "$lines" 
		cd..
	done)
	sum=`echo "$table" | grep -o [0-9]*$ | sumall` 
	folder=`echo $PWD | grep -o "[^/]*$" | tr [a-z] [A-Z]`
	echo "$folder;$sum"
	echo "$table"
}
# Sums all the numbers.
sumall() {
	in=`cat`
	sum=0
	for line in `echo "$in"`; do 
		let sum=sum+"$line"
	done
	echo "$sum"
}


###########
# NETWORK #
###########

# How many people are on network beside you (number of hosts).
noh() {
	if [ $# -gt 0 ]
	then
		forth="$1"
	else
		forth="254"
	fi
	thirdNumberOfIp=`ip1 | sed -e :a -e 's/[0-9]*.\([0-9]\).[0-9]*.[0.9]*/\1/;ta'`
	command="nmap -sP 192.168.$thirdNumberOfIp.0-$forth"
	noOfHosts=`$command | grep -o "[0-9]* hosts up" | grep -o "[0-9]*"`
	noOfOtherUsers=`expr $noOfHosts - 2`
	echo $noOfOtherUsers
}
# Check only first 10 addreses.
alias noh1='noh 10'

# Saves output of nmap1 in file named after current time
# (year-month-day-hour-minute: week of the year-day of the
# week).
networkLogger() {
	destDir="."
	third=`/sbin/ifconfig \
		| grep "inet addr:192.168" \
		| grep -o addr:[0-9.]* \
		| grep -o "[0-9.]*" \
		| sed -e :a -e "s/[0-9]*.\([0-9]\).[0-9]*.[0.9]*/\1/;ta"`
	forth="20"
	nmap -sP 192.168.$third.0-$forth > "$destDir"/`date +%y-%m-%d-%H-%M:%W-%u`]
}

# Should create some kind of a timeline from files created by
# notworkLogger, displaying when which machine was online.
niceDisplay() {
	cd "~/networkLogger/logs"
	# For all uniqe host names,
	for n in `cat * | grep Host | sort | uniq | grep -v Gateway | sed 's/^Host \([^ ]*\).*$/\1/'`; do
		printf "$n:\t"
		# check every log file if it contains it
		for f in *; do
			cat "$f" | grep -q "$n"
			if [ $? -eq 0 ]; then
				# and print a * if it does.
				printf "*"
			else
				printf " "
			fi
		done
		echo ""
	done
}


############
# INTERNET #
############

# Rss feed reader.
alias rss='nrss'

# Prints nba scores. Not totally reliable, as pages tend to
# change.
alias nbaScoreboard="lynx -dump -crawl http://scores.nbcsports.msnbc.com/nba/scoreboard.asp | grep -w 'PM' -A10 | grep -v 'STATS LLC\|Any commercial\|NBC Sports\|NBC Universal' | grep -v MST | sed 's/^.*ET\([0-9:]*\).*$/   \1/' | grep -v Preview | sed '/^$/N;/^\n$/D' | m"
nba() {
	e -n '   ';	date; e 
	nbaScoreboard
}
# Prints nba standings. A bit more reliable. 
nbaStandings() {
	lynx -dump -crawl http://scores.nbcsports.msnbc.com/nba/standings_conference.asp \
		| grep 'Eastern Conference' -A39 \
		| gr _ -v \
		| sed 's/New York/New=York/g' \
		| sed 's/San Antonio/San=Antonio/g' \
		| sed 's/Oklahoma City/Oklahoma=City/g' \
		| sed 's/Trail Blazers/Trail=Blazers/g' \
		| sed 's/Los Angeles/Los=Angeles/g' \
		| sed 's/Golden State/Golden=State/g' \
		| sed 's/New Orleans/New=Orleans/g' \
		| sed 's/Conf GB/Conf=GB/g' \
		| sed 's/Last 10/Last=10/g' \
		| sed 's/\([0-9]*\) \([W\|L]\)$/\1=\2/g' \
		| sed 's/W L/= = = W L/' \
		| sed 's/Eastern Conference/€/g' \
		| sed 's/Western Conference/ħ/g' \
		| column -t \
		| tr '=' ' ' \
		| sed 's/€/Eastern Conference/' \
		| sed 's/ħ/\nWestern Conference/' \
		| catOrLess
}
alias nba1='e; nbaStandings; e'


# Opens linx browser with search results for passed arguments
# except the first one which specifies the webpage. 
searchWebpage() {
  if [ $# -eq 1 ]; then
    url="$1"
  fi

  if [ $# -eq 2 ]; then
    url="$1/search?q=$2" 
  fi

  if [ $# -gt 2 ]; then
    url="$1/search?q=$2"
    i=0
    for var in "$@"; do
      if [ $i -gt 1 ];  then
        url=$url+$var
      fi
      let i=$i+1
    done
  fi
  eval "lynx $url"
}

# Opens lynx browser with search results for $@ in
# stackoverflow.com. Not really useful, you get better results
# using Google.
alias so='stack'
alias stack='searchWebpage http://stackoverflow.com'
# Opens lynx browser with search results for $@ in
# superuser.com. 
alias suser='http://superuser.com'

# Opens lynx browser with search result for $@ in wikipedia.org. 
wiki() {
  if [ $# -eq 0 ]
  then
    url='http://en.wikipedia.org/wiki/'
  fi

  if [ $# -eq 1 ]
  then
    url="http://en.wikipedia.org/wiki/$1"
  fi

  if [ $# -gt 1 ]
  then
    url="http://en.wikipedia.org/wiki/$1"
    i=0
    for var in "$@"
    do
      if [ $i -gt 0 ]
      then
        url="${url}_${var}"
      fi
      let i=$i+1
    done
  fi

  # only print part before contents and remove references
	lynx -dump "$url" | while read line
	do
		if [ "$line" == "Contents" ]; then
			break
		fi
		echo "$line" | sed 's/\[[0-9]*\]//g'
	done
}


###########
# WEATHER #
###########

# Aliases for weather conditions at specific locations. City ids
# can be found at yahoo weather, just find page of the city and
# copy id from url.
weathr() {
	curl --silent "http://weather.yahooapis.com/forecastrss?w=$1&u=c" \
	| awk -F '- '  '/<title>/ { sub("</title>", "", $2) && l=$2 }/<b>Forecast/ { getline; gsub("<.*", "", $2); printf("%s: %s\n", l, $2); exit }'
}
alias wea1='weathr 531951' # Weather for Trzic.
alias wea2='weathr 530634' # Weather for Ljubljana.
alias wea='wea1; wea2'


##################
# IMAGE DOWNLOAD #
##################

# Gets google image thumbnail for the passed phrase, and sends
# it to stdout.
gi1() {
	# Wget needs to introduce itself as a browser.
	wget -qO- "http://images.google.com/images?q=$(echo "$@" | sed 's/ /+/g')" -U "Firefox on Ubuntu Gutsy: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.14) Gecko/20080418 Ubuntu/7.10 (gutsy) Firefox/2.0.0.14" \
		| grep -o '<img[^>]*>' \
		| head -n1 \
		| grep "src=\"[^\"]*" -o \
		| sed 's/src=\"//' \
		| wget -i- -O-
}
# Download image and instantly display it.
gi() {
	gi1 "$@" 2> /dev/null | display &
}
# Same but as background process.
gi2() {
	gi1 "$@" 2> /dev/null | display
}
# For every input line it downloads first google image match
# (thumbnail) and saves it in PWD.
gimage() {
	cat | while read line
	do 
		gi1 "$line" > "$line"
		# Wait 3 seconds between downloads, so we appear more
		# humanlike. If no sleep is used, your ip will get
		# banned when reaching around 1000 or 2000 downloads. Of
		# course if you have dynamic ip, reseting connection to
		# your internet provider will fix the problem. I didn't
		# try to find out what happens if you repeat the
		# process:)
		sleep 3
	done
}


#########
# AUDIO #
#########

alias pl='mplayer'
alias mp='mplayer'

# Copies all files that are referenced in playlist to desired
# directory.  Also removes their track numbers from filenames
# (if any) and replaces them with the numbers that corespond to
# order the songs are featured in the playlist. 
#
# Usage: cp-m3u <m3u playlist> <destination directory>
cp-m3u() {
	IFS=$'\n'
	i=1
	for a in `cat "$1" | grep ^[^#]`; do
    	doubleDigitNumber="$i"
		if [ "$i" -lt 10 ]; then 
			doubleDigitNumber=0"$i"
		fi  
		cp "$a" "$2"/"$doubleDigitNumber"`basename "$a"| sed 's/^[0-9]*//'`
		let i=i+1
	done
}


################
# AUDIO PLAYER #
################

# Plays song. (Downloads from youtube if nothing found locally)
# TODO: Doesn't find file in a filesystem.
spilej() {
	if [ -f "$1" ]
	then
		echo "Playing \"$1\""
		mplayer -slave "$@" &> /dev/null
	#else if
		# TODO: check temp folder
		#foundFiles=`find /tmp/spilejYoutube/ -iname '*$1*.wav' -o -iname '*$1*.mp3'-o -iname '*$2*.mp3'-o -iname '*$2*.mp3'`
		#if [ $foundFiles == "" ]
	else
		#search filesystem
		#TODO check that it's not mp3.part file
		echo "No file in folder. Scanning filesystem..."
		listOfFiles=`locate ".*$*.*mp3" ".*$*.*wav" --regex --quiet --ignore-case`
		noOfFiles=`echo "$listOfFiles" | wc -l`
		if [ "$noOfFiles" -gt 1 ]
		then
			#echo "File found."
			let chosenNumber="$RANDOM"%"$noOfFiles"
			fileName=`echo "$listOfFiles" | sed "$chosenNumber!d" | sed 's/\(.*\)\r/"\1"/g' `
			echo "Playing \"$fileName\""
			mplayer "$fileName" &> /dev/null
		else
			echo "No file in filesystem. Searching Youtube..."
			spilejYoutube "$*"
		fi		
	fi
}

# Try to find song on Youtube. Download video, convert it to
# audio and play.
spilejYoutube() {
	#TODO More reliable search	
	#TODO MP4
	#TODO Stop executing if one step fails
	cd ~/Music; mkdir spilejYoutube 2>/dev/null; cd spilejYoutube
	# Generate script that will try to input string into
	# youtubes search box, and then somehow navigate to the
	# search results, choose one hit and bookmark it in
	# $HOME/lynx_bookmarks.
	#echo "Generating search script."
	lynxYoutubeSkripta "$*" > spilejLinxSkripta
	# Run lynx with that script.
	#echo "Searching."
	lynx -cmd_script=~/Music/spilejYoutube/spilejLinxSkripta www.youtube.com &>/dev/null
	# Use last bookmark.
	url=`cut --delimiter='"' -f 2 $HOME/lynx_bookmarks.html | tail -n1 | sed s/";".*$//`
	#echo "url:$url"
	# Download video using youtube-dl.
	echo "Downloading: $url"
	youtube-dl -q "$url"
	# Convert it into mp3.
	fileId=`echo $url | sed 's/^.*=//'`
	videoFilename=`ls *$fileId.*`
	audioFilename=`echo "$videoFilename" | sed 's/\..*$//g'`.wav
	echo "filename: $audioFilename"
	ffmpeg -i "$videoFilename" "$audioFilename" &> /dev/null
	# Delete the video.
	\rm "$videoFilename"
    # Play the audio.
	mplayer "$audioFilename" &>/dev/null
}

# Searches youtube for arguments and (hopefully) returns first
# match.
lynxYoutubeSkripta() {
	echo "key v"
	for i in {1..8}
	do
		echo "key Down Arrow"
	done
	echo "`echo "$*" | sed 's/\(.\)/\1\n/g' | sed 's/[ ]/<space>/g' | sed 's/^/key /g' | head -n -1`"
	echo "key Up Arrow"
	echo "key Right Arrow"
	for i in {1..44}
	do
		echo "key Down Arrow"
	done
	echo "key a
key l
key ^J
key q
key y"
}

# Plays three songs that match the search pattern in a row. 
#TODO Should not play same songs.
spilej3() {
	spilej "$@"
	spilej "$@"
	spilej "$@"
}


#################################
# TRACEROUTE WITH COUNTRY CODES #
#################################

# Print country codes on the route to host.  This is one option,
# but doesn't work correctly: wget -qO-
# http://api.wipmania.com/"$ip", because it mostly just returns
# the location of the seat of company that owns the router.
traceroute1() {
	i=1
	echo -n "$@; "
	traceroute "$@" | while read line
	do
		if [ $i -gt 2 ]; then
		
			url=`echo "$line" | sed -r 's/^[ ]*[0-9]+  ([^ ]+) .*$/\1/'`
			cc=`echo "$url" | grep -o '\.[a-z][a-z][ ]*$' | tr -d '.' | tr 'a-z' 'A-Z'`
			
			if [ $i -eq 3 ]; then
				echo -n "$url; "
			fi

			if [[ "$cc" != "" && "$cc" != "EU" ]]; then
				countryN="$cc"
			else
				countryN=`echo "$url" | urlToCountry | sed -r 's/.*\.([a-z][a-z])\.geant\.net/\1/'`
			fi

			isIp=`echo "$countryN" | grep -P '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
			if [ "$isIp" != "" ]; then
				countryN="$countryO"
			fi
		
			if [ "$countryN" != "$countryO" ]; then
				if [ $i -gt 3 ]; then
					echo -n " > "
				fi
				if [ "$countryN" == "" ]; then
					echo -n "??"
				else 
					echo -n "$countryN"
				fi
				countryO="$countryN"
			fi			
			
		fi
		let i=$i+1
		if [ $i -gt 31 ]; then
			echo -n " > .."
		fi	
	done
	echo
}

# Prints assumed location of the router.
urlToCountry() {
	input=`cat`
	echo "$input" | 
	callSed DE gw-hetzner fra frankfurt ffm frnk frf "f\.de" hbg nue Dusseldorf Berlin |
	callSed AT win wien vienna vie grz |
	callSed CZ prag |
	callSed US Houston 10ge4-2\.core1\.slc1\.he\.net ace-data-centers-inc\.10gigabitethernet1-4\.core1\.slc1\.he\.net -orl- -dc- "\.usa\." "\.us\." den nyc nyk NewYork ash asb chi chichago wdc Washington dal dlls sjo SanJose sjc phx phoenix atl mia mai lax [^t]las LosAngeles sttl |	#New York
	callSed GB "\.us\." lon ldn lnd |
	callSed DK kbn cop dk-| 
	callSed FR "\.fr\." par prs Paris mrs mei Marseille mars |
	callSed NE ams adm amd |
	callSed BU sfia |
	callSed HU szekesfehervar |
	callSed PL poz pzn poznan Warsaw | 
	callSed NL amsterdam |
	callSed BA travnik |
	callSed HU bud bpt Budapest |
	callSed JP osak tok |
	callSed TZ dar | 
	callSed IN mba | 
	callSed MZ mpm | 
	callSed PT lis | 
	callSed ES mad bcn |
	callSed IT mil Milan rom palermo |
	callSed SG sng sing \.sg\. | 
	callSed BE Brussels belnet |
	callSed EE tal | 
	callSed LV rig latvija | 
	callSed CA Montreal | 
	callSed LT kau | 		
	callSed GR ath |	
	callSed IE Dublin |
	callSed AU nsw |	
	callSed RU spb |	
	callSed RO buc roedu |	
	callSed ZA mtz |	
	callSed CL Santiago |	
	callSed CA tor |		
	callSed CN macau | 	
	callSed AR bue baires | 
	callSed CI IRVOCA |
	callSed DJ dji | 
	callSed SI siol |
	callSed KZ Kaza | 
	callSed LU lxb | 
	callSed CY cypr | 
	callSed LK srilanka |
	callSed BM north-rock-communications
	callSed HR zag |
	callSed IS is- |
	callSed IL bezeqint |
	callSed JM flowja |
	callSed CH zrh [^r]gen |
	callSed LY libia |
	callSed SK \.sk\. |
	callSed SE se- |
	callSed TR \.tr\. |
	callSed  |
	callSed  |
	callSed
	# te2-2.ccr01.zag01.atlas.cogentco.com -> US!!!
	#./callSed.sh CH gen | #ARGENTINA!
}

callSed() {
	input=`cat`
	i=1
	for arg in "$@"; do
		if [ $i -gt 1 ]; then
			input=`echo "$input" | sed "s/[^ ]*$arg[^ ]*/$1/I"`
		fi
		let i=$i+1
	done
	echo "$input"
}

# Prints urls of random universities, one per country.
universities() {
	# get all country codes from index site, together with
	# country name
	wget -qO - http://univ.cc/world.php | grep -o 'option value=\"[a-z]*\">[A-Za-z ]*(' | grep -o \".* | tr -d "\"" | tr -d "(" | while read ccc
	do
		country=`echo $ccc | sed 's/>.*//'`
		countryName=`echo $ccc | sed 's/.*>//'`
		if [ "$country" != "world" ]; then
			# use them to get to country subsites and print url
			# of random university that has country code for tld
			urls=`wget -qO - "http://univ.cc/search.php?dom=$country&key=&start=1" | grep -o "'http:[^ ]*\.$country/[^ ]*'" | tr -d "'" | shuf`
			url=""
			while [ "$urls" != "" ]; do
				url=`echo "$urls" | head -n1`
				wget --timeout=3 --tries=1 -qO- "$url" >/dev/null
				if [ $? -eq 0 ]; then
					break
				fi
				urls=`echo "$urls" | tail -n +2`
			done
			
			if [ "$url" != "" ]; then
				echo "$countryName>$url"
			fi
		fi
	done
}

# Traceroutes one university per country. If as argument "1" is
# passed, then it calls traceroute1 instead. That variation
# prints country codes of routers on path, instead of their
# urls.
www() {
	universities | while read nameAndUrl
	do
		countryName=`echo $nameAndUrl | sed 's/>.*//'`
		url=`echo $nameAndUrl | sed 's/.*>//' | sed 's/http://' | tr -d '/'`
		echo -n "$countryName; "
		echo -n `date --rfc-3339=seconds`
		echo -n "; "
		traceroute"$1" "$url"
	done
}

alias www1='www 1'

